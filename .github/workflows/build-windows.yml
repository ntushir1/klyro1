name: Build Windows AppX Package

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: false
        default: '0.2.4'

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build renderer
      run: npm run build:renderer
      
    - name: Build unpacked Windows app
      run: |
        # Build only the unpacked app, not AppX packages
        npm run build:renderer
        npx electron-builder --win --x64 --dir --publish never
      
    - name: Create AppX manifest
      run: |
        $manifestContent = @"
        <?xml version="1.0" encoding="UTF-8"?>
        <Package
          xmlns="http://schemas.microsoft.com/appx/manifest/foundation/windows10"
          xmlns:uap="http://schemas.microsoft.com/appx/manifest/uap/windows10"
          xmlns:rescap="http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities"
          IgnorableNamespaces="uap rescap">
        
          <Identity Name="IsotryonKlyro"
                    Publisher="CN=Isotryon Team"
                    Version="0.2.4.0"
                    ProcessorArchitecture="x64"
                    ResourceId="en-us" />
        
          <Properties>
            <DisplayName>Klyro</DisplayName>
            <PublisherDisplayName>Isotryon Team</PublisherDisplayName>
            <Logo>Assets\StoreLogo.png</Logo>
            <Description>AI-powered desktop assistant for real-time transcription and conversation</Description>
          </Properties>
        
          <Dependencies>
            <TargetDeviceFamily Name="Windows.Desktop" MinVersion="10.0.17763.0" MaxVersionTested="10.0.19041.0" />
          </Dependencies>
        
          <Resources>
            <Resource Language="en-us" />
          </Resources>
        
          <Applications>
            <Application Id="App"
                       Executable="Klyro.exe"
                       EntryPoint="Windows.FullTrustApplication">
              <uap:VisualElements
                DisplayName="Klyro"
                Description="AI-powered desktop assistant for real-time transcription and conversation"
                BackgroundColor="transparent"
                Square150x150Logo="Assets\Square150x150Logo.png"
                Square44x44Logo="Assets\Square44x44Logo.png" />
              <Extensions>
                <uap:Extension Category="windows.protocol">
                  <uap:Protocol Name="isotryonklyro" />
                </uap:Extension>
              </Extensions>
            </Application>
          </Applications>
        
          <Capabilities>
            <rescap:Capability Name="runFullTrust" />
            <rescap:Capability Name="allowElevation" />
            <Capability Name="internetClient" />
            <Capability Name="privateNetworkClientServer" />
            <Capability Name="microphone" />
            <Capability Name="picturesLibrary" />
            <Capability Name="videosLibrary" />
            <Capability Name="documentsLibrary" />
          </Capabilities>
        
        </Package>
        "@
        
        # Create Assets directory
        New-Item -ItemType Directory -Path "dist\win-unpacked\Assets" -Force | Out-Null
        
        # Create placeholder StoreLogo.png (1x1 transparent pixel)
        $PlaceholderImage = [System.Convert]::FromBase64String("iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==")
        [System.IO.File]::WriteAllBytes("dist\win-unpacked\Assets\StoreLogo.png", $PlaceholderImage)
        
        # Copy to other required asset files
        Copy-Item "dist\win-unpacked\Assets\StoreLogo.png" -Destination "dist\win-unpacked\Assets\Square44x44Logo.png"
        Copy-Item "dist\win-unpacked\Assets\StoreLogo.png" -Destination "dist\win-unpacked\Assets\Square150x150Logo.png"
        
        # Create the manifest file
        Set-Content -Path "dist\win-unpacked\AppxManifest.xml" -Value $manifestContent -Encoding UTF8
        
        Write-Host "AppX manifest and assets created successfully"
        
    - name: Build MSIX package
      run: |
        Write-Host "Attempting to build MSIX package..."
        
        # Try to find makeappx in common Windows SDK locations
        $makeappxPaths = @(
          "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.22000.0\x64\makeappx.exe",
          "${env:ProgramFiles(x86)}\Windows Kits\10\bin\x64\makeappx.exe",
          "${env:ProgramFiles}\Windows Kits\10\bin\10.0.22000.0\x64\makeappx.exe",
          "${env:ProgramFiles}\Windows Kits\10\bin\x64\makeappx.exe",
          "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.19041.0\x64\makeappx.exe",
          "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.18362.0\x64\makeappx.exe"
        )
        
        $makeappxPath = $null
        foreach ($path in $makeappxPaths) {
          if (Test-Path $path) {
            $makeappxPath = $path
            Write-Host "Found makeappx at: $makeappxPath"
            break
          }
        }
        
        if ($makeappxPath) {
          try {
            Write-Host "Building AppX package with makeappx..."
            & $makeappxPath pack /d "dist\win-unpacked" /p "dist\Klyro-0.2.4.appx"
            if ($LASTEXITCODE -eq 0) {
              Write-Host "✅ AppX package created successfully!"
            } else {
              throw "makeappx failed with exit code $LASTEXITCODE"
            }
          } catch {
            Write-Warning "makeappx failed: $_"
            $makeappxPath = $null
          }
        }
        
        if (-not $makeappxPath -or -not (Test-Path "dist\Klyro-0.2.4.appx")) {
          Write-Host "Creating ZIP package as fallback..."
          Compress-Archive -Path "dist\win-unpacked\*" -DestinationPath "dist\Klyro-0.2.4.zip" -Force
          Write-Host "✅ ZIP package created successfully!"
        }
        
        Write-Host "MSIX/AppX build completed"
      
    - name: Upload AppX artifact
      uses: actions/upload-artifact@v4
      with:
        name: klyro-windows-appx
        path: dist/*.appx
        retention-days: 30
        
    - name: Upload ZIP artifact (fallback)
      uses: actions/upload-artifact@v4
      with:
        name: klyro-windows-zip
        path: dist/*.zip
        retention-days: 30
        
    - name: Upload unpacked app
      uses: actions/upload-artifact@v4
      with:
        name: klyro-windows-unpacked
        path: dist/win-unpacked/
        retention-days: 30
        
    - name: Create release
      if: github.event_name == 'workflow_dispatch'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: Klyro v${{ github.event.inputs.version }} Windows AppX
        body: |
          Windows MSIX/AppX package for Microsoft Store submission
          
          ## Files included:
          - AppX package (.appx) - for Store submission
          - ZIP package (.zip) - fallback if AppX creation fails
          - Unpacked application - for direct execution
          
          ## Installation:
          ```powershell
          # Install AppX package (recommended for Store)
          Add-AppxPackage -Path "Klyro-${{ github.event.inputs.version }}.appx"
          
          # Or extract and run ZIP package
          Expand-Archive "Klyro-${{ github.event.inputs.version }}.zip" -DestinationPath "Klyro"
          .\Klyro\Klyro.exe
          
          # Or run the unpacked version directly
          .\win-unpacked\Klyro.exe
          ```
        draft: false
        prerelease: false
