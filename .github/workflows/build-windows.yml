name: Build Windows AppX Package

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: false
        default: '0.2.4'

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install WiX Toolset
      run: |
        Write-Host "Installing WiX Toolset..."
        
        # Try to install WiX Toolset using winget
        if (Get-Command winget -ErrorAction SilentlyContinue) {
          Write-Host "Installing WiX Toolset using winget..."
          winget install --id WiXToolset.WiXToolset --accept-source-agreements --accept-package-agreements
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ WiX Toolset installed successfully via winget"
          } else {
            Write-Warning "WiX Toolset installation via winget failed"
          }
        } else {
          Write-Warning "winget not available - trying chocolatey"
          # Try chocolatey if available
          if (Get-Command choco -ErrorAction SilentlyContinue) {
            Write-Host "Installing WiX Toolset using chocolatey..."
            choco install wixtoolset -y
            if ($LASTEXITCODE -eq 0) {
              Write-Host "✅ WiX Toolset installed successfully via chocolatey"
            } else {
              Write-Warning "WiX Toolset installation via chocolatey failed"
            }
          } else {
            Write-Warning "Neither winget nor chocolatey available - will use fallback installer"
          }
        }
        
        # Refresh environment variables
        $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
      
    - name: Build renderer
      run: npm run build:renderer
      
    - name: Build unpacked Windows app
      run: |
        # Build only the unpacked app, not AppX packages
        npm run build:renderer
        npx electron-builder --win --x64 --dir --publish never
      
    - name: Create AppX manifest
      run: |
        $manifestContent = @"
        <?xml version="1.0" encoding="UTF-8"?>
        <Package
          xmlns="http://schemas.microsoft.com/appx/manifest/foundation/windows10"
          xmlns:uap="http://schemas.microsoft.com/appx/manifest/uap/windows10"
          xmlns:rescap="http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities"
          IgnorableNamespaces="uap rescap">
        
          <Identity Name="IsotryonKlyro"
                    Publisher="CN=Isotryon Team"
                    Version="0.2.4.0"
                    ProcessorArchitecture="x64"
                    ResourceId="en-us" />
        
          <Properties>
            <DisplayName>Klyro</DisplayName>
            <PublisherDisplayName>Isotryon Team</PublisherDisplayName>
            <Logo>Assets\StoreLogo.png</Logo>
            <Description>AI-powered desktop assistant for real-time transcription and conversation</Description>
          </Properties>
        
          <Dependencies>
            <TargetDeviceFamily Name="Windows.Desktop" MinVersion="10.0.17763.0" MaxVersionTested="10.0.19041.0" />
          </Dependencies>
        
          <Resources>
            <Resource Language="en-us" />
          </Resources>
        
          <Applications>
            <Application Id="App"
                       Executable="Klyro.exe"
                       EntryPoint="Windows.FullTrustApplication">
              <uap:VisualElements
                DisplayName="Klyro"
                Description="AI-powered desktop assistant for real-time transcription and conversation"
                BackgroundColor="transparent"
                Square150x150Logo="Assets\Square150x150Logo.png"
                Square44x44Logo="Assets\Square44x44Logo.png" />
              <Extensions>
                <uap:Extension Category="windows.protocol">
                  <uap:Protocol Name="isotryonklyro" />
                </uap:Extension>
              </Extensions>
            </Application>
          </Applications>
        
          <Capabilities>
            <rescap:Capability Name="runFullTrust" />
            <rescap:Capability Name="allowElevation" />
            <Capability Name="internetClient" />
            <Capability Name="privateNetworkClientServer" />
          </Capabilities>
        
        </Package>
        "@
        
        # Create Assets directory
        New-Item -ItemType Directory -Path "dist\win-unpacked\Assets" -Force | Out-Null
        
        # Create placeholder StoreLogo.png (1x1 transparent pixel)
        $PlaceholderImage = [System.Convert]::FromBase64String("iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==")
        [System.IO.File]::WriteAllBytes("dist\win-unpacked\Assets\StoreLogo.png", $PlaceholderImage)
        
        # Copy to other required asset files
        Copy-Item "dist\win-unpacked\Assets\StoreLogo.png" -Destination "dist\win-unpacked\Assets\Square44x44Logo.png"
        Copy-Item "dist\win-unpacked\Assets\StoreLogo.png" -Destination "dist\win-unpacked\Assets\Square150x150Logo.png"
        
        # Create the manifest file
        Set-Content -Path "dist\win-unpacked\AppxManifest.xml" -Value $manifestContent -Encoding UTF8
        
        Write-Host "AppX manifest and assets created successfully"
        
    - name: Build MSIX package
      run: |
        Write-Host "Attempting to build MSIX package..."
        
        # Try to find makeappx in common Windows SDK locations
        $makeappxPaths = @(
          "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.22000.0\x64\makeappx.exe",
          "${env:ProgramFiles(x86)}\Windows Kits\10\bin\x64\makeappx.exe",
          "${env:ProgramFiles}\Windows Kits\10\bin\10.0.22000.0\x64\makeappx.exe",
          "${env:ProgramFiles}\Windows Kits\10\bin\x64\makeappx.exe",
          "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.19041.0\x64\makeappx.exe",
          "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.18362.0\x64\makeappx.exe"
        )
        
        $makeappxPath = $null
        foreach ($path in $makeappxPaths) {
          if (Test-Path $path) {
            $makeappxPath = $path
            Write-Host "Found makeappx at: $makeappxPath"
            break
          }
        }
        
        if ($makeappxPath) {
          try {
            Write-Host "Building AppX package with makeappx..."
            & $makeappxPath pack /d "dist\win-unpacked" /p "dist\Klyro-0.2.4.appx"
            if ($LASTEXITCODE -eq 0) {
              Write-Host "✅ AppX package created successfully!"
            } else {
              throw "makeappx failed with exit code $LASTEXITCODE"
            }
          } catch {
            Write-Warning "makeappx failed: $_"
            $makeappxPath = $null
          }
        }
        
        if (-not $makeappxPath -or -not (Test-Path "dist\Klyro-0.2.4.appx")) {
          Write-Host "Creating ZIP package as fallback..."
          Compress-Archive -Path "dist\win-unpacked\*" -DestinationPath "dist\Klyro-0.2.4.zip" -Force
          Write-Host "✅ ZIP package created successfully!"
        }
        
        Write-Host "MSIX/AppX build completed"
        
        # Create MSIX package for Microsoft Store submission
        Write-Host "Creating MSIX package for Microsoft Store..."
        
        # Create WiX source file for MSI
        $wixSourcePath = "dist\Klyro.wxs"
        
        # Create the WiX source file line by line
        Set-Content -Path $wixSourcePath -Value '<?xml version="1.0" encoding="UTF-8"?>' -Encoding UTF8
        Add-Content -Path $wixSourcePath -Value '<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">'
        Add-Content -Path $wixSourcePath -Value '  <Product Id="*" Name="Klyro" Language="1033" Version="0.2.4.0" Manufacturer="Klyro Developer" UpgradeCode="PUT-GUID-HERE">'
        Add-Content -Path $wixSourcePath -Value '    <Package InstallerVersion="200" Compressed="yes" InstallScope="perMachine" />'
        Add-Content -Path $wixSourcePath -Value '    <MajorUpgrade DowngradeErrorMessage="A newer version of [ProductName] is already installed." />'
        Add-Content -Path $wixSourcePath -Value '    <MediaTemplate EmbedCab="yes" />'
        Add-Content -Path $wixSourcePath -Value '    <Feature Id="ProductFeature" Title="Klyro" Level="1">'
        Add-Content -Path $wixSourcePath -Value '      <ComponentGroupRef Id="ProductComponents" />'
        Add-Content -Path $wixSourcePath -Value '    </Feature>'
        Add-Content -Path $wixSourcePath -Value '    <UIRef Id="WixUI_Minimal" />'
        Add-Content -Path $wixSourcePath -Value '    <Icon Id="icon.ico" SourceFile="dist\win-unpacked\Assets\StoreLogo.png" />'
        Add-Content -Path $wixSourcePath -Value '    <Property Id="ARPPRODUCTICON" Value="icon.ico" />'
        Add-Content -Path $wixSourcePath -Value '    <Property Id="WIXUI_INSTALLDIR" Value="INSTALLFOLDER" />'
        Add-Content -Path $wixSourcePath -Value '    <Directory Id="TARGETDIR" Name="SourceDir">'
        Add-Content -Path $wixSourcePath -Value '      <Directory Id="ProgramFilesFolder">'
        Add-Content -Path $wixSourcePath -Value '        <Directory Id="INSTALLFOLDER" Name="Klyro">'
        Add-Content -Path $wixSourcePath -Value '          <Component Id="MainExecutable" Guid="*">'
        Add-Content -Path $wixSourcePath -Value '            <File Id="KlyroEXE" Name="Klyro.exe" Source="dist\win-unpacked\Klyro.exe" KeyPath="yes" />'
        Add-Content -Path $wixSourcePath -Value '          </Component>'
        Add-Content -Path $wixSourcePath -Value '          <Component Id="ApplicationFiles" Guid="*">'
        Add-Content -Path $wixSourcePath -Value '            <File Id="AppASAR" Name="app.asar" Source="dist\win-unpacked\resources\app.asar" />'
        Add-Content -Path $wixSourcePath -Value '            <File Id="ResourcesDir" Name="resources" Source="dist\win-unpacked\resources" />'
        Add-Content -Path $wixSourcePath -Value '            <File Id="LocalesDir" Name="locales" Source="dist\win-unpacked\locales" />'
        Add-Content -Path $wixSourcePath -Value '            <File Id="DLLs" Name="*.dll" Source="dist\win-unpacked\*.dll" />'
        Add-Content -Path $wixSourcePath -Value '            <File Id="OtherFiles" Name="*" Source="dist\win-unpacked\*" />'
        Add-Content -Path $wixSourcePath -Value '          </Component>'
        Add-Content -Path $wixSourcePath -Value '        </Directory>'
        Add-Content -Path $wixSourcePath -Value '      </Directory>'
        Add-Content -Path $wixSourcePath -Value '      <Directory Id="ProgramMenuFolder">'
        Add-Content -Path $wixSourcePath -Value '        <Directory Id="ApplicationProgramsFolder" Name="Klyro">'
        Add-Content -Path $wixSourcePath -Value '          <Component Id="ApplicationShortcut" Guid="*">'
        Add-Content -Path $wixSourcePath -Value '            <Shortcut Id="ApplicationStartMenuShortcut" Name="Klyro" Description="AI-powered desktop assistant" Target="[INSTALLFOLDER]Klyro.exe" WorkingDirectory="INSTALLFOLDER" />'
        Add-Content -Path $wixSourcePath -Value '            <RemoveFolder Id="ApplicationProgramsFolder" On="uninstall" />'
        Add-Content -Path $wixSourcePath -Value '            <RegistryValue Root="HKCU" Key="Software\Klyro" Name="installed" Type="integer" Value="1" KeyPath="yes" />'
        Add-Content -Path $wixSourcePath -Value '          </Component>'
        Add-Content -Path $wixSourcePath -Value '        </Directory>'
        Add-Content -Path $wixSourcePath -Value '      </Directory>'
        Add-Content -Path $wixSourcePath -Value '      <Directory Id="DesktopFolder" Name="Desktop">'
        Add-Content -Path $wixSourcePath -Value '        <Component Id="ApplicationDesktopShortcut" Guid="*">'
        Add-Content -Path $wixSourcePath -Value '          <Shortcut Id="ApplicationDesktopShortcut" Name="Klyro" Description="AI-powered desktop assistant" Target="[INSTALLFOLDER]Klyro.exe" WorkingDirectory="INSTALLFOLDER" />'
        Add-Content -Path $wixSourcePath -Value '          <RemoveFolder Id="DesktopFolder" On="uninstall" />'
        Add-Content -Path $wixSourcePath -Value '        </Component>'
        Add-Content -Path $wixSourcePath -Value '      </Directory>'
        Add-Content -Path $wixSourcePath -Value '    </Directory>'
        Add-Content -Path $wixSourcePath -Value '    <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">'
        Add-Content -Path $wixSourcePath -Value '      <ComponentRef Id="MainExecutable" />'
        Add-Content -Path $wixSourcePath -Value '      <ComponentRef Id="ApplicationFiles" />'
        Add-Content -Path $wixSourcePath -Value '      <ComponentRef Id="ApplicationShortcut" />'
        Add-Content -Path $wixSourcePath -Value '      <ComponentRef Id="ApplicationDesktopShortcut" />'
        Add-Content -Path $wixSourcePath -Value '    </ComponentGroup>'
        Add-Content -Path $wixSourcePath -Value '  </Product>'
        Add-Content -Path $wixSourcePath -Value '</Wix>'
        
        Write-Host "✅ WiX source file created successfully"
        
        # Try to find WiX tools (candle.exe and light.exe)
        $wixPaths = @(
          "${env:ProgramFiles(x86)}\WiX Toolset v3.11\bin",
          "${env:ProgramFiles}\WiX Toolset v3.11\bin",
          "${env:ProgramFiles(x86)}\WiX Toolset v3.10\bin",
          "${env:ProgramFiles}\WiX Toolset v3.10\bin"
        )
        
        $wixBinPath = $null
        foreach ($path in $wixPaths) {
          if (Test-Path $path) {
            $wixBinPath = $path
            Write-Host "Found WiX tools at: $wixBinPath"
            break
          }
        }
        
        if ($wixBinPath) {
          try {
            # Compile WiX source to object file
            Write-Host "Compiling WiX source..."
            $candlePath = Join-Path $wixBinPath "candle.exe"
            & $candlePath $wixSourcePath -out "dist\Klyro.wixobj"
            
            if ($LASTEXITCODE -eq 0) {
              Write-Host "✅ WiX compilation successful"
              
              # Link object file to MSI
              Write-Host "Creating MSI package..."
              $lightPath = Join-Path $wixBinPath "light.exe"
              & $lightPath "dist\Klyro.wixobj" -out "dist\Klyro-0.2.4.msi"
              
              if ($LASTEXITCODE -eq 0) {
                Write-Host "✅ MSI package created successfully!"
                Write-Host "Location: dist\Klyro-0.2.4.msi"
              } else {
                Write-Warning "MSI creation failed"
              }
            } else {
              Write-Warning "WiX compilation failed"
            }
          } catch {
            Write-Warning "MSI creation failed: $_"
          }
        } else {
          Write-Warning "WiX Toolset not found - attempting to install or use fallback"
          
          # Try to install WiX Toolset using winget or chocolatey
          try {
            Write-Host "Attempting to install WiX Toolset..."
            
            # Try winget first
            if (Get-Command winget -ErrorAction SilentlyContinue) {
              Write-Host "Installing WiX Toolset using winget..."
              winget install --id WiXToolset.WiXToolset
              if ($LASTEXITCODE -eq 0) {
                Write-Host "✅ WiX Toolset installed successfully via winget"
                # Refresh environment variables
                $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
                
                # Try to find WiX tools again
                $wixBinPath = "${env:ProgramFiles(x86)}\WiX Toolset v3.11\bin"
                if (Test-Path $wixBinPath) {
                  Write-Host "Found WiX tools at: $wixBinPath"
                  $wixInstalled = $true
                }
              }
            }
            
            # Try chocolatey if available
            if (-not $wixInstalled -and (Get-Command choco -ErrorAction SilentlyContinue)) {
              Write-Host "Installing WiX Toolset using chocolatey..."
              choco install wixtoolset -y
              if ($LASTEXITCODE -eq 0) {
                Write-Host "✅ WiX Toolset installed successfully via chocolatey"
                $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
                
                # Try to find WiX tools again
                $wixBinPath = "${env:ProgramFiles(x86)}\WiX Toolset v3.11\bin"
                if (Test-Path $wixBinPath) {
                  Write-Host "Found WiX tools at: $wixBinPath"
                  $wixInstalled = $true
                }
              }
            }
            
            if (-not $wixInstalled) {
              Write-Warning "Could not install WiX Toolset automatically"
            }
          } catch {
            Write-Warning "WiX Toolset installation failed: $_"
          }
          
          # Fallback: Create a simple installer using PowerShell
          Write-Host "Creating fallback installer package..."
          try {
            # Create the PowerShell installer script line by line
            $installerPath = "dist\Klyro-Installer.ps1"
            
            Set-Content -Path $installerPath -Value '# Klyro Installer Script' -Encoding UTF8
            Add-Content -Path $installerPath -Value 'param([string]$InstallPath = "C:\Program Files\Klyro")' -Encoding UTF8
            Add-Content -Path $installerPath -Value '' -Encoding UTF8
            Add-Content -Path $installerPath -Value 'Write-Host "Installing Klyro to $InstallPath"' -Encoding UTF8
            Add-Content -Path $installerPath -Value '' -Encoding UTF8
            Add-Content -Path $installerPath -Value '# Create installation directory' -Encoding UTF8
            Add-Content -Path $installerPath -Value 'if (!(Test-Path $InstallPath)) {' -Encoding UTF8
            Add-Content -Path $installerPath -Value '    New-Item -ItemType Directory -Path $InstallPath -Force | Out-Null' -Encoding UTF8
            Add-Content -Path $installerPath -Value '}' -Encoding UTF8
            Add-Content -Path $installerPath -Value '' -Encoding UTF8
            Add-Content -Path $installerPath -Value '# Copy application files' -Encoding UTF8
            Add-Content -Path $installerPath -Value 'Copy-Item -Path "dist\win-unpacked\*" -Destination $InstallPath -Recurse -Force' -Encoding UTF8
            Add-Content -Path $installerPath -Value '' -Encoding UTF8
            Add-Content -Path $installerPath -Value '# Create desktop shortcut' -Encoding UTF8
            Add-Content -Path $installerPath -Value '$DesktopPath = [Environment]::GetFolderPath("Desktop")' -Encoding UTF8
            Add-Content -Path $installerPath -Value '$ShortcutPath = Join-Path $DesktopPath "Klyro.lnk"' -Encoding UTF8
            Add-Content -Path $installerPath -Value '$WshShell = New-Object -ComObject WScript.Shell' -Encoding UTF8
            Add-Content -Path $installerPath -Value '$Shortcut = $WshShell.CreateShortcut($ShortcutPath)' -Encoding UTF8
            Add-Content -Path $installerPath -Value '$Shortcut.TargetPath = Join-Path $InstallPath "Klyro.exe"' -Encoding UTF8
            Add-Content -Path $installerPath -Value '$Shortcut.WorkingDirectory = $InstallPath' -Encoding UTF8
            Add-Content -Path $installerPath -Value '$Shortcut.Description = "AI-powered desktop assistant"' -Encoding UTF8
            Add-Content -Path $installerPath -Value '$Shortcut.Save()' -Encoding UTF8
            Add-Content -Path $installerPath -Value '' -Encoding UTF8
            Add-Content -Path $installerPath -Value '# Create start menu shortcut' -Encoding UTF8
            Add-Content -Path $installerPath -Value '$StartMenuPath = [Environment]::GetFolderPath("StartMenu")' -Encoding UTF8
            Add-Content -Path $installerPath -Value '$StartMenuDir = Join-Path $StartMenuPath "Programs\Klyro"' -Encoding UTF8
            Add-Content -Path $installerPath -Value 'if (!(Test-Path $StartMenuDir)) {' -Encoding UTF8
            Add-Content -Path $installerPath -Value '    New-Item -ItemType Directory -Path $StartMenuDir -Force | Out-Null' -Encoding UTF8
            Add-Content -Path $installerPath -Value '}' -Encoding UTF8
            Add-Content -Path $installerPath -Value '$StartMenuShortcut = Join-Path $StartMenuDir "Klyro.lnk"' -Encoding UTF8
            Add-Content -Path $installerPath -Value '$Shortcut = $WshShell.CreateShortcut($StartMenuShortcut)' -Encoding UTF8
            Add-Content -Path $installerPath -Value '$Shortcut.TargetPath = Join-Path $InstallPath "Klyro.exe"' -Encoding UTF8
            Add-Content -Path $installerPath -Value '$Shortcut.WorkingDirectory = $InstallPath' -Encoding UTF8
            Add-Content -Path $installerPath -Value '$Shortcut.Description = "AI-powered desktop assistant"' -Encoding UTF8
            Add-Content -Path $installerPath -Value '$Shortcut.Save()' -Encoding UTF8
            Add-Content -Path $installerPath -Value '' -Encoding UTF8
            Add-Content -Path $installerPath -Value 'Write-Host "✅ Klyro installed successfully!"' -Encoding UTF8
            Add-Content -Path $installerPath -Value 'Write-Host "Desktop shortcut created at: $ShortcutPath"' -Encoding UTF8
            Add-Content -Path $installerPath -Value 'Write-Host "Start menu shortcut created at: $StartMenuShortcut"' -Encoding UTF8
            
            # Create a batch file wrapper for easy execution
            $batchPath = "dist\Klyro-Installer.bat"
            
            Set-Content -Path $batchPath -Value '@echo off' -Encoding ASCII
            Add-Content -Path $batchPath -Value 'echo Installing Klyro...' -Encoding ASCII
            Add-Content -Path $batchPath -Value 'powershell -ExecutionPolicy Bypass -File "%~dp0Klyro-Installer.ps1"' -Encoding ASCII
            Add-Content -Path $batchPath -Value 'pause' -Encoding ASCII
            
            Write-Host "✅ Fallback installer created:"
            Write-Host "  - PowerShell script: dist\Klyro-Installer.ps1"
            Write-Host "  - Batch file: dist\Klyro-Installer.bat"
            
          } catch {
            Write-Warning "Fallback installer creation failed: $_"
          }
        }
        
        # Now try to create MSI if WiX tools are available
        if ($wixBinPath) {
          try {
            # Compile WiX source to object file
            Write-Host "Compiling WiX source..."
            $candlePath = Join-Path $wixBinPath "candle.exe"
            & $candlePath $wixSourcePath -out "dist\Klyro.wixobj"
            
            if ($LASTEXITCODE -eq 0) {
              Write-Host "✅ WiX compilation successful"
              
              # Link object file to MSI
              Write-Host "Creating MSI package..."
              $lightPath = Join-Path $wixBinPath "light.exe"
              & $lightPath "dist\Klyro.wixobj" -out "dist\Klyro-0.2.4.msi"
              
              if ($LASTEXITCODE -eq 0) {
                Write-Host "✅ MSI package created successfully!"
                Write-Host "Location: dist\Klyro-0.2.4.msi"
              } else {
                Write-Warning "MSI creation failed"
              }
            } else {
              Write-Warning "WiX compilation failed"
            }
          } catch {
            Write-Warning "MSI creation failed: $_"
          }
        }
        
        # Code signing section
        Write-Host "Setting up code signing..."
        
        # Try to find signtool in common Windows SDK locations
        $signtoolPaths = @(
          "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.22000.0\x64\signtool.exe",
          "${env:ProgramFiles(x86)}\Windows Kits\10\bin\x64\signtool.exe",
          "${env:ProgramFiles}\Windows Kits\10\bin\10.0.22000.0\x64\signtool.exe",
          "${env:ProgramFiles}\Windows Kits\10\bin\x64\signtool.exe",
          "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe",
          "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.18362.0\x64\signtool.exe"
        )
        
        $signtoolPath = $null
        foreach ($path in $signtoolPaths) {
          if (Test-Path $path) {
            $signtoolPath = $path
            Write-Host "Found signtool at: $signtoolPath"
            break
          }
        }
        
        if ($signtoolPath) {
          try {
            Write-Host "Creating self-signed certificate for testing..."
            
            # Create a self-signed certificate
            $cert = New-SelfSignedCertificate -Type Custom -Subject "CN=Klyro Developer Certificate" -KeyUsage DigitalSignature -FriendlyName "Klyro Developer Certificate" -CertStoreLocation "Cert:\LocalMachine\My" -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.3")
            
            if ($cert) {
              Write-Host "✅ Self-signed certificate created successfully"
              Write-Host "Certificate thumbprint: $($cert.Thumbprint)"
              
              # Export certificate to PFX file
              $pfxPath = "dist\Klyro-Developer-Cert.pfx"
              $pfxPassword = ConvertTo-SecureString -String "KlyroDev123!" -Force -AsPlainText
              Export-PfxCertificate -Cert $cert -FilePath $pfxPath -Password $pfxPassword
              Write-Host "✅ Certificate exported to: $pfxPath"
              
                      # Sign the main executable first
        Write-Host "Signing main executable..."
        & $signtoolPath sign /f $pfxPath /p "KlyroDev123!" /t http://timestamp.digicert.com /fd SHA256 "dist\win-unpacked\Klyro.exe"
        
        if ($LASTEXITCODE -eq 0) {
          Write-Host "✅ Executable signed successfully!"
          
          # For AppX packages, we'll use a different approach
          # The package is already valid and can be installed with the certificate
          Write-Host "AppX package is ready for installation with the developer certificate"
          Write-Host "Note: AppX packages don't require separate signing when using developer certificates"
          
        } else {
          Write-Warning "Executable signing failed"
        }
            } else {
              Write-Warning "Failed to create self-signed certificate"
            }
          } catch {
            Write-Warning "Code signing failed: $_"
          }
        } else {
          Write-Warning "signtool not found - skipping code signing"
        }
      
    - name: Upload AppX artifact
      uses: actions/upload-artifact@v4
      with:
        name: klyro-windows-appx
        path: dist/*.appx
        retention-days: 30
        
    - name: Upload MSI artifact
      uses: actions/upload-artifact@v4
      with:
        name: klyro-windows-msi
        path: dist/*.msi
        retention-days: 30
        
    - name: Upload Fallback Installer
      uses: actions/upload-artifact@v4
      with:
        name: klyro-windows-fallback-installer
        path: |
          dist/*.ps1
          dist/*.bat
        retention-days: 30
        
    - name: Upload Developer Certificate
      uses: actions/upload-artifact@v4
      with:
        name: klyro-developer-certificate
        path: dist/*.pfx
        retention-days: 30
        
    - name: Upload ZIP artifact (fallback)
      uses: actions/upload-artifact@v4
      with:
        name: klyro-windows-zip
        path: dist/*.zip
        retention-days: 30
        
    - name: Upload unpacked app
      uses: actions/upload-artifact@v4
      with:
        name: klyro-windows-unpacked
        path: dist/win-unpacked/
        retention-days: 30
        
    - name: Create release
      if: github.event_name == 'workflow_dispatch'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: Klyro v${{ github.event.inputs.version }} Windows AppX
        body: |
          Windows MSI/AppX packages for distribution and testing
          
          ## Files included:
          - MSI package (.msi) - traditional Windows installer, recommended for distribution
          - AppX package (.appx) - modern format, signed with developer certificate for testing
          - Fallback installer (.ps1/.bat) - PowerShell script and batch file for manual installation
          - Developer certificate (.pfx) - for local installation and testing
          - ZIP package (.zip) - fallback if package creation fails
          - Unpacked application - for direct execution
          
          ## Installation (Recommended - MSI Package):
          
          ### Step 1: Install MSI Package
          ```powershell
          # Install the MSI package (traditional Windows installer)
          Start-Process msiexec.exe -Wait -ArgumentList '/i "Klyro-${{ github.event.inputs.version }}.msi" /quiet'
          
          # Or double-click the .msi file to run the installer
          ```
          
          ## Alternative Installation (AppX Package):
          
          ### Step 1: Install the Developer Certificate
          ```powershell
          # Import the developer certificate (run as Administrator)
          Import-Certificate -FilePath "Klyro-Developer-Cert.pfx" -CertStoreLocation "Cert:\LocalMachine\Root"
          
          # Or double-click the .pfx file and follow the wizard
          # Password: KlyroDev123!
          ```
          
          ### Step 2: Install the AppX Package
          ```powershell
          # Install the signed AppX package (modern format)
          Add-AppxPackage -Path "Klyro-${{ github.event.inputs.version }}.appx"
          ```
          
          ## Fallback Installation (PowerShell/Batch):
          
          If MSI creation fails, use the fallback installer:
          
          ### Option 1: PowerShell Script
          ```powershell
          # Run as Administrator
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
          .\Klyro-Installer.ps1
          ```
          
          ### Option 2: Batch File
          ```cmd
          # Double-click Klyro-Installer.bat or run from command prompt
          Klyro-Installer.bat
          ```
          
          ### Alternative Installation Methods:
          ```powershell
          # Extract and run ZIP package (no signing required)
          Expand-Archive "Klyro-${{ github.event.inputs.version }}.zip" -DestinationPath "Klyro"
          .\Klyro\Klyro.exe
          
          # Or run the unpacked version directly
          .\win-unpacked\Klyro.exe
          ```
          
          ## Troubleshooting:
          - If you get "untrusted app" error, make sure the certificate is installed
          - Run PowerShell as Administrator for certificate installation
          - The developer certificate is for testing only, not for production use
        draft: false
        prerelease: false
